/*
 * C12864ST7567.cpp
 *
 *  Created on: 2023年4月16日
 *      Author: geey17u
 */

#include "C12864ST7567.h"
#include "stm32f1xx_hal.h"
#include "stm32f1xx_hal_def.h"
#include "stm32f1xx_hal_gpio.h"
#include <string>

static inline void CS_1(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
};
static inline void CS_0(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
};

static inline void RST_1(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
};
static inline void RST_0(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
};

static inline void AS_1(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
};
static inline void AS_0(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
};

static inline void SCL_1(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
};
static inline void SCL_0(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
};

static inline void SDA_1(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
};
static inline void SDA_0(){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
};

extern "C"{
extern void Delayus(uint16_t nus);
extern void Delayms(uint32_t nms);
}

// 6x8 ASCII字库
static const uint8_t FONT_6x8[] = {
    // 空格 (0x20)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // ! (0x21)
    0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00,
    // " (0x22)
    0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00,
    // # (0x23)
    0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, 0x00,
    // $ (0x24)
    0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00,
    // % (0x25)
    0x00, 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00,
    // & (0x26)
    0x00, 0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00,
    // ' (0x27)
    0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00,
    // ( (0x28)
    0x00, 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x00,
    // ) (0x29)
    0x00, 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00,
    // * (0x2A)
    0x00, 0x14, 0x08, 0x3E, 0x08, 0x14, 0x00, 0x00,
    // + (0x2B)
    0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00,
    // , (0x2C)
    0x00, 0x00, 0x50, 0x30, 0x00, 0x00, 0x00, 0x00,
    // - (0x2D)
    0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00,
    // . (0x2E)
    0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00,
    // / (0x2F)
    0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,
    // 0 (0x30)
    0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00,
    // 1 (0x31)
    0x00, 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00,
    // 2 (0x32)
    0x00, 0x42, 0x61, 0x51, 0x49, 0x46, 0x00, 0x00,
    // 3 (0x33)
    0x00, 0x21, 0x41, 0x45, 0x4B, 0x31, 0x00, 0x00,
    // 4 (0x34)
    0x00, 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00,
    // 5 (0x35)
    0x00, 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00,
    // 6 (0x36)
    0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00,
    // 7 (0x37)
    0x00, 0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00,
    // 8 (0x38)
    0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00,
    // 9 (0x39)
    0x00, 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00,
    // : (0x3A)
    0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00,
    // ; (0x3B)
    0x00, 0x00, 0x56, 0x36, 0x00, 0x00, 0x00, 0x00,
    // < (0x3C)
    0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00,
    // = (0x3D)
    0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00,
    // > (0x3E)
    0x00, 0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00,
    // ? (0x3F)
    0x00, 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00,
    // @ (0x40)
    0x00, 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00, 0x00,
    // A (0x41)
    0x00, 0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00, 0x00,
    // B (0x42)
    0x00, 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00,
    // C (0x43)
    0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00,
    // D (0x44)
    0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00, 0x00,
    // E (0x45)
    0x00, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00,
    // F (0x46)
    0x00, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00,
    // G (0x47)
    0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A, 0x00, 0x00,
    // H (0x48)
    0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00,
    // I (0x49)
    0x00, 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00,
    // J (0x4A)
    0x00, 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00,
    // K (0x4B)
    0x00, 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00,
    // L (0x4C)
    0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00,
    // M (0x4D)
    0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00,
    // N (0x4E)
    0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00,
    // O (0x4F)
    0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00,
    // P (0x50)
    0x00, 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00,
    // Q (0x51)
    0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00,
    // R (0x52)
    0x00, 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00,
    // S (0x53)
    0x00, 0x46, 0x49, 0x49, 0x49, 0x31, 0x00, 0x00,
    // T (0x54)
    0x00, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00,
    // U (0x55)
    0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00,
    // V (0x56)
    0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, 0x00,
    // W (0x57)
    0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00, 0x00,
    // X (0x58)
    0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00,
    // Y (0x59)
    0x00, 0x07, 0x08, 0x70, 0x08, 0x07, 0x00, 0x00,
    // Z (0x5A)
    0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00,
    // [ (0x5B)
    0x00, 0x00, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00,
    // \ (0x5C)
    0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00,
    // ] (0x5D)
    0x00, 0x00, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00,
    // ^ (0x5E)
    0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00,
    // _ (0x5F)
    0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00,
    // ` (0x60)
    0x00, 0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00,
    // a (0x61)
    0x00, 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00,
    // b (0x62)
    0x00, 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00, 0x00,
    // c (0x63)
    0x00, 0x38, 0x44, 0x44, 0x44, 0x20, 0x00, 0x00,
    // d (0x64)
    0x00, 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00, 0x00,
    // e (0x65)
    0x00, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00,
    // f (0x66)
    0x00, 0x08, 0x7E, 0x09, 0x01, 0x02, 0x00, 0x00,
    // g (0x67)
    0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00, 0x00,
    // h (0x68)
    0x00, 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00,
    // i (0x69)
    0x00, 0x00, 0x44, 0x7D, 0x40, 0x00, 0x00, 0x00,
    // j (0x6A)
    0x00, 0x40, 0x80, 0x84, 0x7D, 0x00, 0x00, 0x00,
    // k (0x6B)
    0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00,
    // l (0x6C)
    0x00, 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00, 0x00,
    // m (0x6D)
    0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00,
    // n (0x6E)
    0x00, 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00,
    // o (0x6F)
    0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00,
    // p (0x70)
    0x00, 0xFC, 0x24, 0x24, 0x24, 0x18, 0x00, 0x00,
    // q (0x71)
    0x00, 0x18, 0x24, 0x24, 0x18, 0xFC, 0x00, 0x00,
    // r (0x72)
    0x00, 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00, 0x00,
    // s (0x73)
    0x00, 0x48, 0x54, 0x54, 0x54, 0x20, 0x00, 0x00,
    // t (0x74)
    0x00, 0x04, 0x3F, 0x44, 0x40, 0x20, 0x00, 0x00,
    // u (0x75)
    0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00, 0x00,
    // v (0x76)
    0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, 0x00,
    // w (0x77)
    0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, 0x00,
    // x (0x78)
    0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00,
    // y (0x79)
    0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C, 0x00, 0x00,
    // z (0x7A)
    0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00,
    // { (0x7B)
    0x00, 0x00, 0x10, 0x7C, 0x82, 0x00, 0x00, 0x00,
    // | (0x7C)
    0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
    // } (0x7D)
    0x00, 0x00, 0x82, 0x7C, 0x10, 0x00, 0x00, 0x00,
    // ~ (0x7E)
    0x00, 0x00, 0x06, 0x09, 0x09, 0x06, 0x00, 0x00
};


enum EDataType{
	eDataType_Data = 1,
	eDataType_Command = 0,
};

enum {
	eColMax = 21,
	eRowMax = 8,
	ePixXOff = 4,
};

static uint8_t Instruction[]=
{
	0xe2,			//软件复位指令
	0xa6,			//正显示指令
	0xc8,			//反方向显示指令(也就是旋转180度)
	0x2f,			//开启内置电源指令
	0x26,			//Vo电压设置指令RR的值
	0xa2,			//LCD偏置比例指令=1/9
	0xa1,			//LCD偏置比例指令=1/7
	0xf8,			//内部升压设置指令(双字节指令)
	0x00,			//内部升压设置指令(双字节指令)4x模式
	0x81,			//vo电压设置指令(双字节指令)
	0x09,			//vo电压设置指令(双字节指令)EV的值
	0xaf,			//开启显示指令
};

C12864ST7567& C12864ST7567::Instance(){
	static C12864ST7567 __instance;
	return __instance;
}

C12864ST7567::C12864ST7567() {
	// TODO Auto-generated constructor stub

}

C12864ST7567::~C12864ST7567() {
	// TODO Auto-generated destructor stub
}

void C12864ST7567::Write(uint8_t Dat, uint8_t Flag){
	uint8_t j;
	CS_0();

	if(Flag==1)
	{
		AS_1();
	}
	else
	{
		AS_0();
	}

	for(j=0;j<8;j++)
	{
		if((Dat&0x80)==0x80)
		{
			SDA_1();
		}
		else
		{
			SDA_0();
		}

		SCL_0();
		Delayus(5);
		SCL_1();
		Delayus(5);

		Dat<<=1;
	}
	CS_1();
}

void C12864ST7567::WriteCommand(uint8_t Dat){
	Write(Dat, eDataType_Command);
}

void C12864ST7567::WriteData(uint8_t Dat){
	Write(Dat, eDataType_Data);
}

void C12864ST7567::ColumnSet(uint8_t L)
{
	WriteCommand((0x10|(L>>4)));
	WriteCommand((0x00|(L&0x0f)));
}

void C12864ST7567::PageSet(uint8_t Y)
{
	WriteCommand((0xb0+Y));
}

void C12864ST7567::Init(){
	LCDInitial();
}

void C12864ST7567::LCDInitial(void){

	RST_0();

	Delayms(5);

	RST_1();

	auto cmdSize = sizeof(Instruction) / sizeof(uint8_t);
	for(uint8_t i = 0; i < cmdSize; ++i)
	{
		WriteCommand(Instruction[i]);
	}
}

void C12864ST7567::ClearScreen()
{
	std::string strSpace(eColMax * eRowMax, ' ');
	Display(strSpace.c_str());
}

void C12864ST7567::ClearOne(uint8_t row, uint8_t col)
{
	Display(" ", row, col);
}

void C12864ST7567::ClearLine(uint8_t row, uint8_t col)
{
	if (row >= 0 && row < eRowMax && col >= 0 && col < eColMax)
	{
		std::string strSpace(eColMax - col, ' ');
		Display(strSpace.c_str(), row, col);
	}
}

void C12864ST7567::Display(const char* str, uint8_t row, uint8_t col)
{
	if (col >= 0 && col < eColMax && row >=0 && row < eRowMax){
		DisplayString(6 * col + ePixXOff, 8 * row, str);
	}
}

void C12864ST7567::DisplayString(uint8_t x, uint8_t y, const char* str) {
	//有效显示区域x [4, 128]
    while (*str) {
        DisplayChar(x, y, *str++);
        x += 6; // 6x8字体宽度

        // 自动换行
        if (x > ePixXOff + (eColMax - 1) * 6) {
        	DisplayChar(x++, y, ' ');
        	DisplayChar(x, y, ' ');

            x = ePixXOff;
            y += 8;
            if (y >= 64) break; // 超出显示范围
        }
    }
}

void C12864ST7567::DisplayChar(uint8_t x, uint8_t y, char c) {
    if (c < 32 || c > 127) return; // 只处理可打印ASCII字符
    
    uint8_t page = y / 8;
    
    // 设置显示位置
    PageSet(page);
    ColumnSet(x);
    
    // 获取字符在字库中的偏移
    uint16_t index = (c - 32) * 8;
    
    // 显示字符
    for (uint8_t i = 0; i < 6; i++) {
        WriteData(FONT_6x8[index + i]);
    }
}

void C12864ST7567::SetReverseMode(bool isReverse) {
    WriteCommand(isReverse ? 0xa7 : 0xa6);
}
